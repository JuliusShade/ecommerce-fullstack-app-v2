{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\ecommerce-backend-API-master\\\\src\\\\ecommerce\\\\src\\\\components\\\\ProductList\\\\Item.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./item.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemList = () => {\n  _s();\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/v1/products\").then(response => response.json()).then(data => {\n      setItems(data);\n    }).catch(error => console.error(\"Error fetching items:\", error));\n  }, []);\n  const handleAddToCart = async productId => {\n    console.log(\"Adding product to cart:\", productId);\n    try {\n      // Step 1: Check if a cart exists for the current user\n      const checkCartResponse = await fetch(\"http://localhost:3000/api/v1/cart\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      });\n      if (checkCartResponse.ok) {\n        const existingCartData = await checkCartResponse.json();\n\n        // If a cart already exists, use its ID to add the product to the cart\n        const existingCartId = existingCartData.cart_id;\n        const addToCartResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${existingCartId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.token}`\n          },\n          body: JSON.stringify({\n            productid: productId\n          })\n        });\n        if (addToCartResponse.ok) {\n          console.log(\"Product added to cart successfully!\");\n        } else {\n          console.error(\"Failed to add product to cart.\");\n        }\n      } else {\n        // Step 2: If no cart exists, create a new cart\n        const createCartResponse = await fetch(\"http://localhost:3000/api/v1/cart\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.token}`\n          }\n        });\n        if (createCartResponse.ok) {\n          const newCartData = await createCartResponse.json();\n          const newCartId = newCartData.cart_id;\n\n          // Use the new cart ID to add the product to the cart\n          const addToNewCartResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${newCartId}`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${localStorage.token}`\n            },\n            body: JSON.stringify({\n              productid: productId\n            })\n          });\n          if (addToNewCartResponse.ok) {\n            console.log(\"Product added to cart successfully!\");\n          } else {\n            console.error(\"Failed to add product to cart.\");\n          }\n        } else {\n          console.error(\"Failed to create or retrieve cart.\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error adding product to cart:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"products-header\",\n      children: \"Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"item-name\",\n            children: [item.name, \" | \", item.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"item-description\",\n            children: item.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Add to Cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, item.productid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(ItemList, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n_c = ItemList;\nexport default ItemList;\nvar _c;\n$RefreshReg$(_c, \"ItemList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ItemList","_s","items","setItems","fetch","then","response","json","data","catch","error","console","handleAddToCart","productId","log","checkCartResponse","method","headers","Authorization","localStorage","token","ok","existingCartData","existingCartId","cart_id","addToCartResponse","body","JSON","stringify","productid","createCartResponse","newCartData","newCartId","addToNewCartResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","price","description","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/ecommerce-backend-API-master/src/ecommerce/src/components/ProductList/Item.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./item.css\";\r\n\r\nconst ItemList = () => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:3000/api/v1/products\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setItems(data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching items:\", error));\r\n  }, []);\r\n\r\n  const handleAddToCart = async (productId) => {\r\n    console.log(\"Adding product to cart:\", productId);\r\n    try {\r\n      // Step 1: Check if a cart exists for the current user\r\n      const checkCartResponse = await fetch(\r\n        \"http://localhost:3000/api/v1/cart\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (checkCartResponse.ok) {\r\n        const existingCartData = await checkCartResponse.json();\r\n\r\n        // If a cart already exists, use its ID to add the product to the cart\r\n        const existingCartId = existingCartData.cart_id;\r\n\r\n        const addToCartResponse = await fetch(\r\n          `http://localhost:3000/api/v1/cartitem/${existingCartId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n            body: JSON.stringify({ productid: productId }),\r\n          }\r\n        );\r\n\r\n        if (addToCartResponse.ok) {\r\n          console.log(\"Product added to cart successfully!\");\r\n        } else {\r\n          console.error(\"Failed to add product to cart.\");\r\n        }\r\n      } else {\r\n        // Step 2: If no cart exists, create a new cart\r\n        const createCartResponse = await fetch(\r\n          \"http://localhost:3000/api/v1/cart\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (createCartResponse.ok) {\r\n          const newCartData = await createCartResponse.json();\r\n          const newCartId = newCartData.cart_id;\r\n\r\n          // Use the new cart ID to add the product to the cart\r\n          const addToNewCartResponse = await fetch(\r\n            `http://localhost:3000/api/v1/cartitem/${newCartId}`,\r\n            {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.token}`,\r\n              },\r\n              body: JSON.stringify({ productid: productId }),\r\n            }\r\n          );\r\n\r\n          if (addToNewCartResponse.ok) {\r\n            console.log(\"Product added to cart successfully!\");\r\n          } else {\r\n            console.error(\"Failed to add product to cart.\");\r\n          }\r\n        } else {\r\n          console.error(\"Failed to create or retrieve cart.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error adding product to cart:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"item-list-container\">\r\n      <h2 className=\"products-header\">Products</h2>\r\n      <ul>\r\n        {items.map((item) => (\r\n          <li key={item.productid} className=\"item\">\r\n            <div>\r\n              <h3 className=\"item-name\">\r\n                {item.name} | {item.price}\r\n              </h3>\r\n              <p className=\"item-description\">{item.description}</p>\r\n              <button>Add to Cart</button>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}