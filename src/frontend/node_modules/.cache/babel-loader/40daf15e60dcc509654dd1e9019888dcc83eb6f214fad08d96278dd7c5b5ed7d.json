{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\ecommerce-backend-API-master\\\\src\\\\ecommerce\\\\src\\\\components\\\\Cart\\\\cart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./cart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cart = () => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  useEffect(() => {\n    // Fetch cart items from the server and update the state\n    // Make a request to retrieve cart items based on the user's cart ID\n    // Update the cartItems state with the response\n    fetchCartItems();\n  }, []);\n  const fetchCartItems = async () => {\n    try {\n      // Step 1: Request to retrieve the user ID from the token\n      const userResponse = await fetch(\"http://localhost:3000/api/v1/auth\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      });\n      if (!userResponse.ok) {\n        console.error(\"Failed to retrieve user information.\");\n        return;\n      }\n      const userData = await userResponse.json();\n      const userId = userData.id;\n\n      // Step 2: Request to check if a cart exists for the user\n      const cartResponse = await fetch(`http://localhost:3000/api/v1/cart/${userId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      });\n      if (cartResponse.ok) {\n        const cartData = await cartResponse.json();\n        const cartId = cartData.cart_id;\n\n        // Step 3: Request to retrieve cart items based on the user's cart ID\n        const cartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${cartId}`);\n        if (cartItemsResponse.ok) {\n          const cartItemsData = await cartItemsResponse.json();\n          setCartItems(cartItemsData);\n        } else {\n          console.error(\"Failed to fetch cart items.\", cartItemsResponse.statusText);\n        }\n      } else {\n        // Step 4: If no cart exists, create a new cart for the user\n        const createCartResponse = await fetch(\"http://localhost:3000/api/v1/cart\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.token}`\n          }\n        });\n        if (createCartResponse.ok) {\n          const newCartData = await createCartResponse.json();\n          const newCartId = newCartData.cart_id;\n\n          // Step 5: Request to retrieve cart items for the new cart\n          const newCartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${newCartId}`);\n          if (newCartItemsResponse.ok) {\n            const newCartItemsData = await newCartItemsResponse.json();\n            setCartItems(newCartItemsData);\n          } else {\n            console.error(\"Failed to fetch cart items for the new cart.\", newCartItemsResponse.statusText);\n          }\n        } else {\n          console.error(\"Failed to create or retrieve cart for the user.\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n    }\n  };\n\n  // Calculate the total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cart-header\",\n        children: \"Shopping Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"cart-list\",\n        children: cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"item-name\",\n          children: [cartItem.quantity, \" x \", cartItem.product_name, \" - $\", cartItem.price]\n        }, cartItem.cartitem_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"total\",\n        children: [\"Total: $\", calculateTotal()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"yMyLm0mTOdUD4xRL2vnEhQFbjeY=\");\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Cart","_s","cartItems","setCartItems","fetchCartItems","userResponse","fetch","method","headers","Authorization","localStorage","token","ok","console","error","userData","json","userId","id","cartResponse","cartData","cartId","cart_id","cartItemsResponse","cartItemsData","statusText","createCartResponse","newCartData","newCartId","newCartItemsResponse","newCartItemsData","calculateTotal","reduce","total","cartItem","quantity","price","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","product_name","cartitem_id","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/ecommerce-backend-API-master/src/ecommerce/src/components/Cart/cart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./cart.css\";\r\n\r\nconst Cart = () => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch cart items from the server and update the state\r\n    // Make a request to retrieve cart items based on the user's cart ID\r\n    // Update the cartItems state with the response\r\n    fetchCartItems();\r\n  }, []);\r\n\r\n  const fetchCartItems = async () => {\r\n    try {\r\n      // Step 1: Request to retrieve the user ID from the token\r\n      const userResponse = await fetch(\"http://localhost:3000/api/v1/auth\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      });\r\n\r\n      if (!userResponse.ok) {\r\n        console.error(\"Failed to retrieve user information.\");\r\n        return;\r\n      }\r\n\r\n      const userData = await userResponse.json();\r\n      const userId = userData.id;\r\n\r\n      // Step 2: Request to check if a cart exists for the user\r\n      const cartResponse = await fetch(\r\n        `http://localhost:3000/api/v1/cart/${userId}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (cartResponse.ok) {\r\n        const cartData = await cartResponse.json();\r\n        const cartId = cartData.cart_id;\r\n\r\n        // Step 3: Request to retrieve cart items based on the user's cart ID\r\n        const cartItemsResponse = await fetch(\r\n          `http://localhost:3000/api/v1/cartitem/${cartId}`\r\n        );\r\n\r\n        if (cartItemsResponse.ok) {\r\n          const cartItemsData = await cartItemsResponse.json();\r\n          setCartItems(cartItemsData);\r\n        } else {\r\n          console.error(\r\n            \"Failed to fetch cart items.\",\r\n            cartItemsResponse.statusText\r\n          );\r\n        }\r\n      } else {\r\n        // Step 4: If no cart exists, create a new cart for the user\r\n        const createCartResponse = await fetch(\r\n          \"http://localhost:3000/api/v1/cart\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (createCartResponse.ok) {\r\n          const newCartData = await createCartResponse.json();\r\n          const newCartId = newCartData.cart_id;\r\n\r\n          // Step 5: Request to retrieve cart items for the new cart\r\n          const newCartItemsResponse = await fetch(\r\n            `http://localhost:3000/api/v1/cartitem/${newCartId}`\r\n          );\r\n\r\n          if (newCartItemsResponse.ok) {\r\n            const newCartItemsData = await newCartItemsResponse.json();\r\n            setCartItems(newCartItemsData);\r\n          } else {\r\n            console.error(\r\n              \"Failed to fetch cart items for the new cart.\",\r\n              newCartItemsResponse.statusText\r\n            );\r\n          }\r\n        } else {\r\n          console.error(\"Failed to create or retrieve cart for the user.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching cart:\", error);\r\n    }\r\n  };\r\n\r\n  // Calculate the total price of items in the cart\r\n  const calculateTotal = () => {\r\n    return cartItems.reduce(\r\n      (total, cartItem) => total + cartItem.quantity * cartItem.price,\r\n      0\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"cart-wrapper\">\r\n      <div className=\"cart-container\">\r\n        <h2 className=\"cart-header\">Shopping Cart</h2>\r\n        <ul className=\"cart-list\">\r\n          {cartItems.map((cartItem) => (\r\n            <li className=\"item-name\" key={cartItem.cartitem_id}>\r\n              {cartItem.quantity} x {cartItem.product_name} - ${cartItem.price}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"total\">Total: ${calculateTotal()}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}