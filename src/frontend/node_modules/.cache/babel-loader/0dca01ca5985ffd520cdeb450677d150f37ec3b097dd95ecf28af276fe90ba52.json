{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\ecommerce-backend-API-master\\\\src\\\\ecommerce\\\\src\\\\components\\\\Cart\\\\cart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./cart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const fetchCartItems = async setCartItems => {\n  console.log(\"Fetching cart items...\");\n  console.log(localStorage.token);\n  try {\n    const userResponse = await fetch(\"http://localhost:3000/api/v1/auth/user-data\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token: localStorage.token\n      }\n    });\n    console.log(\"User data received...\");\n    if (!userResponse.ok) {\n      console.error(\"Failed to retrieve user information.\");\n      return;\n    }\n    const userData = await userResponse.json();\n    const userId = userData.id;\n    const cartResponse = await fetch(`http://localhost:3000/api/v1/cart/user/${userId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    });\n    console.log(\"Cart data received...\");\n    if (cartResponse.ok) {\n      const cartData = await cartResponse.json();\n      if (cartData.length > 0) {\n        const cartId = cartData[0].cart_id;\n        const cartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${cartId}`);\n        if (cartItemsResponse.ok) {\n          const cartItemsData = await cartItemsResponse.json();\n          const quantityDict = {};\n          const updatedCartItems = [];\n          for (const cartItem of cartItemsData) {\n            // Check if productid has been processed\n            if (!quantityDict[cartItem.productid]) {\n              const productResponse = await fetch(`http://localhost:3000/api/v1/products/${cartItem.productid}`);\n              if (productResponse.ok) {\n                const productData = await productResponse.json();\n\n                // Count occurrences of the same productid in cartItemsData\n                const productidCount = cartItemsData.filter(item => item.productid === cartItem.productid).length;\n                updatedCartItems.push({\n                  ...cartItem,\n                  name: productData[0].name,\n                  price: productData[0].price * productidCount,\n                  quantity: productidCount\n                });\n                console.log(\"On-screen cart items updated...\");\n                // Mark productid as processed\n                quantityDict[cartItem.productid] = true;\n              } else {\n                console.error(`Failed to fetch product details for product ID ${cartItem.productid}.`);\n              }\n            }\n          }\n\n          // Compare with the existing cart items\n          if (!arraysEqual(updatedCartItems, setCartItems)) {\n            setCartItems(updatedCartItems);\n\n            // Resolve the Promise with the updated cart items\n            return Promise.resolve(updatedCartItems);\n          } else {\n            // Cart items are already up to date, resolve with the current items\n            return Promise.resolve(setCartItems);\n          }\n        } else {\n          console.error(\"Failed to fetch cart items.\", cartItemsResponse.statusText);\n\n          // Reject the Promise if there's an error\n          return Promise.reject(\"Failed to fetch cart items\");\n        }\n      } else {\n        // If the cart does not exist, create a new cart\n        const createCartResponse = await fetch(`http://localhost:3000/api/v1/cart/${userId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.token}`\n          },\n          body: JSON.stringify({\n            user_id: userId // Include the user ID obtained from the token\n          })\n        });\n\n        if (createCartResponse.ok) {\n          const newCartData = await createCartResponse.json();\n          const newCartId = newCartData.cart_id;\n          const newCartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${newCartId}`);\n          if (newCartItemsResponse.ok) {\n            const newCartItemsData = await newCartItemsResponse.json();\n\n            // Check if there are any cart items\n            if (newCartItemsData.length > 0) {\n              setCartItems(newCartItemsData);\n            } else {\n              console.log(\"No cart items found for the new cart.\");\n              // Handle the case when there are no cart items\n            }\n\n            // Resolve the Promise with the updated cart items\n            return Promise.resolve(newCartItemsData);\n          } else {\n            console.error(\"Failed to fetch cart items for the new cart.\", newCartItemsResponse.statusText);\n\n            // Reject the Promise if there's an error\n            return Promise.reject(\"Failed to fetch cart items\");\n          }\n        } else {\n          console.error(\"Failed to create or retrieve cart for the user.\");\n\n          // Reject the Promise if there's an error\n          return Promise.reject(\"Failed to create or retrieve cart\");\n        }\n      }\n    } else {\n      console.error(\"Failed to fetch user cart information.\", cartResponse.statusText);\n\n      // Reject the Promise if there's an error\n      return Promise.reject(\"Failed to fetch user cart information\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching cart:\", error);\n\n    // Reject the Promise if there's an error\n    return Promise.reject(\"Error fetching cart\");\n  }\n};\nexport const refreshCart = async ({\n  setCartItems\n}) => {\n  console.log(\"Refreshing cart...\");\n  try {\n    // Fetch updated cart items and pass a callback to update the state\n    await fetchCartItems(setCartItems);\n  } catch (error) {\n    console.error(\"Error refreshing cart:\", error);\n  }\n};\nexport const Cart = ({\n  setCartItems,\n  onCartUpdate\n}) => {\n  _s();\n  const [cartItems, setCartItemsLocal] = useState([]);\n  const updateCart = async () => {\n    try {\n      // Fetch updated cart items\n      const updatedItems = await fetchCartItems(setCartItemsLocal);\n\n      // Check if cartItems is an array before attempting to update the state\n      if (Array.isArray(updatedItems)) {\n        // Update the component state\n        setCartItems([...updatedItems]);\n\n        // Notify the parent component about the cart update\n        if (typeof onCartUpdate === \"function\") {\n          onCartUpdate(updatedItems);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating cart:\", error);\n    }\n  };\n  useEffect(() => {\n    // Call the function to update the cart\n    updateCart();\n  }, [setCartItems]);\n  useEffect(() => {\n    console.log(\"Cart items updated:\", cartItems);\n    if (Array.isArray(cartItems)) {\n      setCartItems([...cartItems]);\n    }\n  }, [cartItems, setCartItems]);\n  const calculateTotal = () => {\n    if (!cartItems || !Array.isArray(cartItems)) {\n      return 0;\n    }\n\n    // Create an object to store the quantity of each product\n    const productQuantities = {};\n\n    // Count the occurrences of each productid in the cartItems array\n    cartItems.forEach(cartItem => {\n      const {\n        productid\n      } = cartItem;\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\n    });\n\n    // Calculate the total based on the quantity and price of each product\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\n      const quantity = productQuantities[productid];\n      const product = cartItems.find(item => item.productid === parseInt(productid));\n      if (product) {\n        return acc + quantity * product.price;\n      }\n      return acc;\n    }, 0);\n    return total;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cart-header\",\n        children: \"Shopping Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"cart-list\",\n        children: cartItems && Array.isArray(cartItems) && cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"item-name\",\n          children: [cartItem.quantity, \" x \", cartItem.name, \" - $\", cartItem.price]\n        }, cartItem.cartitem_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"total\",\n        children: [\"Total: $\", calculateTotal()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"ycqJBO/RjQ6CpVhgEjNwxWZzuWY=\");\n_c = Cart;\nconst arraysEqual = (arr1, arr2) => {\n  if (arr1.length !== arr2.length) return false;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n  return true;\n};\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","fetchCartItems","setCartItems","console","log","localStorage","token","userResponse","fetch","method","headers","ok","error","userData","json","userId","id","cartResponse","Authorization","cartData","length","cartId","cart_id","cartItemsResponse","cartItemsData","quantityDict","updatedCartItems","cartItem","productid","productResponse","productData","productidCount","filter","item","push","name","price","quantity","arraysEqual","Promise","resolve","statusText","reject","createCartResponse","body","JSON","stringify","user_id","newCartData","newCartId","newCartItemsResponse","newCartItemsData","refreshCart","Cart","onCartUpdate","_s","cartItems","setCartItemsLocal","updateCart","updatedItems","Array","isArray","calculateTotal","productQuantities","forEach","total","Object","keys","reduce","acc","product","find","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","cartitem_id","_c","arr1","arr2","i","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/ecommerce-backend-API-master/src/ecommerce/src/components/Cart/cart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./cart.css\";\r\n\r\nexport const fetchCartItems = async (setCartItems) => {\r\n  console.log(\"Fetching cart items...\");\r\n  console.log(localStorage.token);\r\n  try {\r\n    const userResponse = await fetch(\r\n      \"http://localhost:3000/api/v1/auth/user-data\",\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          token: localStorage.token,\r\n        },\r\n      }\r\n    );\r\n\r\n    console.log(\"User data received...\");\r\n\r\n    if (!userResponse.ok) {\r\n      console.error(\"Failed to retrieve user information.\");\r\n      return;\r\n    }\r\n\r\n    const userData = await userResponse.json();\r\n    const userId = userData.id;\r\n\r\n    const cartResponse = await fetch(\r\n      `http://localhost:3000/api/v1/cart/user/${userId}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    console.log(\"Cart data received...\");\r\n\r\n    if (cartResponse.ok) {\r\n      const cartData = await cartResponse.json();\r\n\r\n      if (cartData.length > 0) {\r\n        const cartId = cartData[0].cart_id;\r\n\r\n        const cartItemsResponse = await fetch(\r\n          `http://localhost:3000/api/v1/cartitem/${cartId}`\r\n        );\r\n\r\n        if (cartItemsResponse.ok) {\r\n          const cartItemsData = await cartItemsResponse.json();\r\n\r\n          const quantityDict = {};\r\n          const updatedCartItems = [];\r\n\r\n          for (const cartItem of cartItemsData) {\r\n            // Check if productid has been processed\r\n            if (!quantityDict[cartItem.productid]) {\r\n              const productResponse = await fetch(\r\n                `http://localhost:3000/api/v1/products/${cartItem.productid}`\r\n              );\r\n\r\n              if (productResponse.ok) {\r\n                const productData = await productResponse.json();\r\n\r\n                // Count occurrences of the same productid in cartItemsData\r\n                const productidCount = cartItemsData.filter(\r\n                  (item) => item.productid === cartItem.productid\r\n                ).length;\r\n\r\n                updatedCartItems.push({\r\n                  ...cartItem,\r\n                  name: productData[0].name,\r\n                  price: productData[0].price * productidCount,\r\n                  quantity: productidCount,\r\n                });\r\n                console.log(\"On-screen cart items updated...\");\r\n                // Mark productid as processed\r\n                quantityDict[cartItem.productid] = true;\r\n              } else {\r\n                console.error(\r\n                  `Failed to fetch product details for product ID ${cartItem.productid}.`\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          // Compare with the existing cart items\r\n          if (!arraysEqual(updatedCartItems, setCartItems)) {\r\n            setCartItems(updatedCartItems);\r\n\r\n            // Resolve the Promise with the updated cart items\r\n            return Promise.resolve(updatedCartItems);\r\n          } else {\r\n            // Cart items are already up to date, resolve with the current items\r\n            return Promise.resolve(setCartItems);\r\n          }\r\n        } else {\r\n          console.error(\r\n            \"Failed to fetch cart items.\",\r\n            cartItemsResponse.statusText\r\n          );\r\n\r\n          // Reject the Promise if there's an error\r\n          return Promise.reject(\"Failed to fetch cart items\");\r\n        }\r\n      } else {\r\n        // If the cart does not exist, create a new cart\r\n        const createCartResponse = await fetch(\r\n          `http://localhost:3000/api/v1/cart/${userId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n            body: JSON.stringify({\r\n              user_id: userId, // Include the user ID obtained from the token\r\n            }),\r\n          }\r\n        );\r\n\r\n        if (createCartResponse.ok) {\r\n          const newCartData = await createCartResponse.json();\r\n          const newCartId = newCartData.cart_id;\r\n\r\n          const newCartItemsResponse = await fetch(\r\n            `http://localhost:3000/api/v1/cartitem/${newCartId}`\r\n          );\r\n\r\n          if (newCartItemsResponse.ok) {\r\n            const newCartItemsData = await newCartItemsResponse.json();\r\n\r\n            // Check if there are any cart items\r\n            if (newCartItemsData.length > 0) {\r\n              setCartItems(newCartItemsData);\r\n            } else {\r\n              console.log(\"No cart items found for the new cart.\");\r\n              // Handle the case when there are no cart items\r\n            }\r\n\r\n            // Resolve the Promise with the updated cart items\r\n            return Promise.resolve(newCartItemsData);\r\n          } else {\r\n            console.error(\r\n              \"Failed to fetch cart items for the new cart.\",\r\n              newCartItemsResponse.statusText\r\n            );\r\n\r\n            // Reject the Promise if there's an error\r\n            return Promise.reject(\"Failed to fetch cart items\");\r\n          }\r\n        } else {\r\n          console.error(\"Failed to create or retrieve cart for the user.\");\r\n\r\n          // Reject the Promise if there's an error\r\n          return Promise.reject(\"Failed to create or retrieve cart\");\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"Failed to fetch user cart information.\",\r\n        cartResponse.statusText\r\n      );\r\n\r\n      // Reject the Promise if there's an error\r\n      return Promise.reject(\"Failed to fetch user cart information\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching cart:\", error);\r\n\r\n    // Reject the Promise if there's an error\r\n    return Promise.reject(\"Error fetching cart\");\r\n  }\r\n};\r\n\r\nexport const refreshCart = async ({ setCartItems }) => {\r\n  console.log(\"Refreshing cart...\");\r\n  try {\r\n    // Fetch updated cart items and pass a callback to update the state\r\n    await fetchCartItems(setCartItems);\r\n  } catch (error) {\r\n    console.error(\"Error refreshing cart:\", error);\r\n  }\r\n};\r\n\r\nexport const Cart = ({ setCartItems, onCartUpdate }) => {\r\n  const [cartItems, setCartItemsLocal] = useState([]);\r\n\r\n  const updateCart = async () => {\r\n    try {\r\n      // Fetch updated cart items\r\n      const updatedItems = await fetchCartItems(setCartItemsLocal);\r\n\r\n      // Check if cartItems is an array before attempting to update the state\r\n      if (Array.isArray(updatedItems)) {\r\n        // Update the component state\r\n        setCartItems([...updatedItems]);\r\n\r\n        // Notify the parent component about the cart update\r\n        if (typeof onCartUpdate === \"function\") {\r\n          onCartUpdate(updatedItems);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating cart:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Call the function to update the cart\r\n    updateCart();\r\n  }, [setCartItems]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Cart items updated:\", cartItems);\r\n    if (Array.isArray(cartItems)) {\r\n      setCartItems([...cartItems]);\r\n    }\r\n  }, [cartItems, setCartItems]);\r\n\r\n  const calculateTotal = () => {\r\n    if (!cartItems || !Array.isArray(cartItems)) {\r\n      return 0;\r\n    }\r\n\r\n    // Create an object to store the quantity of each product\r\n    const productQuantities = {};\r\n\r\n    // Count the occurrences of each productid in the cartItems array\r\n    cartItems.forEach((cartItem) => {\r\n      const { productid } = cartItem;\r\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\r\n    });\r\n\r\n    // Calculate the total based on the quantity and price of each product\r\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\r\n      const quantity = productQuantities[productid];\r\n      const product = cartItems.find(\r\n        (item) => item.productid === parseInt(productid)\r\n      );\r\n\r\n      if (product) {\r\n        return acc + quantity * product.price;\r\n      }\r\n      return acc;\r\n    }, 0);\r\n\r\n    return total;\r\n  };\r\n\r\n  return (\r\n    <div className=\"cart-wrapper\">\r\n      <div className=\"cart-container\">\r\n        <h2 className=\"cart-header\">Shopping Cart</h2>\r\n        <ul className=\"cart-list\">\r\n          {cartItems &&\r\n            Array.isArray(cartItems) &&\r\n            cartItems.map((cartItem) => (\r\n              <li className=\"item-name\" key={cartItem.cartitem_id}>\r\n                {cartItem.quantity} x {cartItem.name} - ${cartItem.price}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n        <p className=\"total\">Total: ${calculateTotal()}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst arraysEqual = (arr1, arr2) => {\r\n  if (arr1.length !== arr2.length) return false;\r\n  for (let i = 0; i < arr1.length; i++) {\r\n    if (arr1[i] !== arr2[i]) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default Cart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}