{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\ecommerce-backend-API-master\\\\src\\\\ecommerce\\\\src\\\\components\\\\Order\\\\order.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Order = () => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    // Fetch cart items when the component mounts\n    fetchCartItems();\n  }, []);\n  const fetchCartItems = async () => {\n    console.log(localStorage.token);\n    try {\n      const userResponse = await fetch(\"http://localhost:3000/api/v1/auth/user-data\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: localStorage.token\n        }\n      });\n      if (!userResponse.ok) {\n        console.error(\"Failed to retrieve user information.\");\n        return;\n      }\n      const userData = await userResponse.json();\n      const userId = userData.id;\n      const cartResponse = await fetch(`http://localhost:3000/api/v1/cart/user/${userId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      });\n      if (cartResponse.ok) {\n        const cartData = await cartResponse.json();\n        const cartId = cartData[0].cart_id;\n        const cartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${cartId}`);\n        if (cartItemsResponse.ok) {\n          const cartItemsData = await cartItemsResponse.json();\n          const quantityDict = {};\n          const updatedCartItems = [];\n          for (const cartItem of cartItemsData) {\n            // Check if productid has been processed\n            if (!quantityDict[cartItem.productid]) {\n              const productResponse = await fetch(`http://localhost:3000/api/v1/products/${cartItem.productid}`);\n              if (productResponse.ok) {\n                const productData = await productResponse.json();\n\n                // Count occurrences of the same productid in cartItemsData\n                const productidCount = cartItemsData.filter(item => item.productid === cartItem.productid).length;\n                updatedCartItems.push({\n                  ...cartItem,\n                  name: productData[0].name,\n                  price: productData[0].price * productidCount,\n                  quantity: productidCount\n                });\n\n                // Mark productid as processed\n                quantityDict[cartItem.productid] = true;\n              } else {\n                console.error(`Failed to fetch product details for product ID ${cartItem.productid}.`);\n              }\n            }\n          }\n          setCartItems(updatedCartItems);\n        } else {\n          console.error(\"Failed to fetch cart items.\", cartItemsResponse.statusText);\n        }\n      } else {\n        const createCartResponse = await fetch(\"http://localhost:3000/api/v1/cart\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.token}`\n          }\n        });\n        if (createCartResponse.ok) {\n          const newCartData = await createCartResponse.json();\n          const newCartId = newCartData.cart_id;\n          const newCartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${newCartId}`);\n          if (newCartItemsResponse.ok) {\n            const newCartItemsData = await newCartItemsResponse.json();\n            setCartItems(newCartItemsData);\n          } else {\n            console.error(\"Failed to fetch cart items for the new cart.\", newCartItemsResponse.statusText);\n          }\n        } else {\n          console.error(\"Failed to create or retrieve cart for the user.\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n    }\n  };\n  const calculateTotal = () => {\n    // Create an object to store the quantity of each product\n    const productQuantities = {};\n\n    // Count the occurrences of each productid in the cartItems array\n    cartItems.forEach(cartItem => {\n      const {\n        productid\n      } = cartItem;\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\n    });\n\n    // Calculate the total based on the quantity and price of each product\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\n      const quantity = productQuantities[productid];\n      const product = cartItems.find(item => item.productid === parseInt(productid));\n      if (product) {\n        return acc + quantity * product.price;\n      }\n      return acc;\n    }, 0);\n    return total;\n  };\n  const handleSubmitOrder = async () => {\n    try {\n      // Get the token from local storage\n      const token = localStorage.getItem(\"token\");\n\n      // Decode the payload of the token\n      const payload = token.split(\".\")[1];\n      const decodedPayload = atob(payload);\n\n      // Parse the payload as JSON to get user information\n      const user = JSON.parse(decodedPayload);\n\n      // Extract the user ID\n      const userId = user.id;\n\n      // Calculate the total\n      const total = calculateTotal(); // Implement this function based on your logic\n\n      // Submit the order\n      const orderResponse = await fetch(\"http://localhost:3000/api/v1/orders\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          total: total,\n          status: true\n        })\n      });\n      if (orderResponse.ok) {\n        const orderData = await orderResponse.json();\n        const orderId = orderData.order_id;\n\n        // Redirect to the confirmation page with the order ID\n        history.push(`/confirmation/${orderId}`);\n      } else {\n        console.error(\"Failed to submit the order.\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting the order:\", error);\n    }\n  };\n  const deleteCartItems = async cartItems => {\n    try {\n      const deletePromises = cartItems.map(async cartItem => {\n        const response = await fetch(`http://localhost:3000/api/v1/cartitem/${cartItem.cartitem_id}`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          console.error(`Failed to delete cart item with ID ${cartItem.cartitem_id}`);\n        }\n      });\n\n      // Wait for all delete requests to complete\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\"Error deleting cart items:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"order-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"order-header\",\n        children: \"Review Your Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"order-list\",\n        children: cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"order-item\",\n          children: [cartItem.quantity, \" x \", cartItem.name, \" - $\", cartItem.price]\n        }, cartItem.cartitem_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"order-total\",\n        children: [\"Total: $\", calculateTotal()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"order-button\",\n        onClick: handleSubmitOrder,\n        children: \"Submit Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s(Order, \"N61bQ9kiTk0Gb/XySs/qcPW9rOs=\", false, function () {\n  return [useHistory];\n});\n_c = Order;\nexport default Order;\nvar _c;\n$RefreshReg$(_c, \"Order\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","jsxDEV","_jsxDEV","Order","_s","cartItems","setCartItems","history","fetchCartItems","console","log","localStorage","token","userResponse","fetch","method","headers","ok","error","userData","json","userId","id","cartResponse","Authorization","cartData","cartId","cart_id","cartItemsResponse","cartItemsData","quantityDict","updatedCartItems","cartItem","productid","productResponse","productData","productidCount","filter","item","length","push","name","price","quantity","statusText","createCartResponse","newCartData","newCartId","newCartItemsResponse","newCartItemsData","calculateTotal","productQuantities","forEach","total","Object","keys","reduce","acc","product","find","parseInt","handleSubmitOrder","getItem","payload","split","decodedPayload","atob","user","JSON","parse","orderResponse","body","stringify","user_id","status","orderData","orderId","order_id","deleteCartItems","deletePromises","map","response","cartitem_id","Promise","all","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/ecommerce-backend-API-master/src/ecommerce/src/components/Order/order.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Order = () => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Fetch cart items when the component mounts\r\n    fetchCartItems();\r\n  }, []);\r\n\r\n  const fetchCartItems = async () => {\r\n    console.log(localStorage.token);\r\n    try {\r\n      const userResponse = await fetch(\r\n        \"http://localhost:3000/api/v1/auth/user-data\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            token: localStorage.token,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!userResponse.ok) {\r\n        console.error(\"Failed to retrieve user information.\");\r\n        return;\r\n      }\r\n\r\n      const userData = await userResponse.json();\r\n      const userId = userData.id;\r\n\r\n      const cartResponse = await fetch(\r\n        `http://localhost:3000/api/v1/cart/user/${userId}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (cartResponse.ok) {\r\n        const cartData = await cartResponse.json();\r\n        const cartId = cartData[0].cart_id;\r\n\r\n        const cartItemsResponse = await fetch(\r\n          `http://localhost:3000/api/v1/cartitem/${cartId}`\r\n        );\r\n\r\n        if (cartItemsResponse.ok) {\r\n          const cartItemsData = await cartItemsResponse.json();\r\n\r\n          const quantityDict = {};\r\n          const updatedCartItems = [];\r\n\r\n          for (const cartItem of cartItemsData) {\r\n            // Check if productid has been processed\r\n            if (!quantityDict[cartItem.productid]) {\r\n              const productResponse = await fetch(\r\n                `http://localhost:3000/api/v1/products/${cartItem.productid}`\r\n              );\r\n\r\n              if (productResponse.ok) {\r\n                const productData = await productResponse.json();\r\n\r\n                // Count occurrences of the same productid in cartItemsData\r\n                const productidCount = cartItemsData.filter(\r\n                  (item) => item.productid === cartItem.productid\r\n                ).length;\r\n\r\n                updatedCartItems.push({\r\n                  ...cartItem,\r\n                  name: productData[0].name,\r\n                  price: productData[0].price * productidCount,\r\n                  quantity: productidCount,\r\n                });\r\n\r\n                // Mark productid as processed\r\n                quantityDict[cartItem.productid] = true;\r\n              } else {\r\n                console.error(\r\n                  `Failed to fetch product details for product ID ${cartItem.productid}.`\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          setCartItems(updatedCartItems);\r\n        } else {\r\n          console.error(\r\n            \"Failed to fetch cart items.\",\r\n            cartItemsResponse.statusText\r\n          );\r\n        }\r\n      } else {\r\n        const createCartResponse = await fetch(\r\n          \"http://localhost:3000/api/v1/cart\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (createCartResponse.ok) {\r\n          const newCartData = await createCartResponse.json();\r\n          const newCartId = newCartData.cart_id;\r\n\r\n          const newCartItemsResponse = await fetch(\r\n            `http://localhost:3000/api/v1/cartitem/${newCartId}`\r\n          );\r\n\r\n          if (newCartItemsResponse.ok) {\r\n            const newCartItemsData = await newCartItemsResponse.json();\r\n            setCartItems(newCartItemsData);\r\n          } else {\r\n            console.error(\r\n              \"Failed to fetch cart items for the new cart.\",\r\n              newCartItemsResponse.statusText\r\n            );\r\n          }\r\n        } else {\r\n          console.error(\"Failed to create or retrieve cart for the user.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching cart:\", error);\r\n    }\r\n  };\r\n\r\n  const calculateTotal = () => {\r\n    // Create an object to store the quantity of each product\r\n    const productQuantities = {};\r\n\r\n    // Count the occurrences of each productid in the cartItems array\r\n    cartItems.forEach((cartItem) => {\r\n      const { productid } = cartItem;\r\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\r\n    });\r\n\r\n    // Calculate the total based on the quantity and price of each product\r\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\r\n      const quantity = productQuantities[productid];\r\n      const product = cartItems.find(\r\n        (item) => item.productid === parseInt(productid)\r\n      );\r\n\r\n      if (product) {\r\n        return acc + quantity * product.price;\r\n      }\r\n      return acc;\r\n    }, 0);\r\n\r\n    return total;\r\n  };\r\n\r\n  const handleSubmitOrder = async () => {\r\n    try {\r\n      // Get the token from local storage\r\n      const token = localStorage.getItem(\"token\");\r\n\r\n      // Decode the payload of the token\r\n      const payload = token.split(\".\")[1];\r\n      const decodedPayload = atob(payload);\r\n\r\n      // Parse the payload as JSON to get user information\r\n      const user = JSON.parse(decodedPayload);\r\n\r\n      // Extract the user ID\r\n      const userId = user.id;\r\n\r\n      // Calculate the total\r\n      const total = calculateTotal(); // Implement this function based on your logic\r\n\r\n      // Submit the order\r\n      const orderResponse = await fetch(\"http://localhost:3000/api/v1/orders\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: userId,\r\n          total: total,\r\n          status: true,\r\n        }),\r\n      });\r\n\r\n      if (orderResponse.ok) {\r\n        const orderData = await orderResponse.json();\r\n        const orderId = orderData.order_id;\r\n\r\n        // Redirect to the confirmation page with the order ID\r\n        history.push(`/confirmation/${orderId}`);\r\n      } else {\r\n        console.error(\"Failed to submit the order.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error submitting the order:\", error);\r\n    }\r\n  };\r\n\r\n  const deleteCartItems = async (cartItems) => {\r\n    try {\r\n      const deletePromises = cartItems.map(async (cartItem) => {\r\n        const response = await fetch(\r\n          `http://localhost:3000/api/v1/cartitem/${cartItem.cartitem_id}`,\r\n          {\r\n            method: \"DELETE\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          console.error(\r\n            `Failed to delete cart item with ID ${cartItem.cartitem_id}`\r\n          );\r\n        }\r\n      });\r\n\r\n      // Wait for all delete requests to complete\r\n      await Promise.all(deletePromises);\r\n    } catch (error) {\r\n      console.error(\"Error deleting cart items:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"order-wrapper\">\r\n      <div className=\"order-container\">\r\n        <h2 className=\"order-header\">Review Your Order</h2>\r\n        <ul className=\"order-list\">\r\n          {cartItems.map((cartItem) => (\r\n            <li className=\"order-item\" key={cartItem.cartitem_id}>\r\n              {cartItem.quantity} x {cartItem.name} - ${cartItem.price}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"order-total\">Total: ${calculateTotal()}</p>\r\n        <button className=\"order-button\" onClick={handleSubmitOrder}>\r\n          Submit Order\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}