{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\ecommerce-backend-API-master\\\\src\\\\ecommerce\\\\src\\\\components\\\\Cart\\\\cart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./cart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cart = () => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  useEffect(() => {\n    fetchCartItems();\n  }, []);\n  const fetchCartItems = async () => {\n    console.log(localStorage.token);\n    try {\n      const userResponse = await fetch(\"http://localhost:3000/api/v1/auth/user-data\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: localStorage.token\n        }\n      });\n      if (!userResponse.ok) {\n        console.error(\"Failed to retrieve user information.\");\n        return;\n      }\n      const userData = await userResponse.json();\n      const userId = userData.id;\n      const cartResponse = await fetch(`http://localhost:3000/api/v1/cart/user/${userId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      });\n      if (cartResponse.ok) {\n        const cartData = await cartResponse.json();\n        if (cartData.length > 0) {\n          const cartId = cartData[0].cart_id;\n          const cartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${cartId}`);\n          if (cartItemsResponse.ok) {\n            const cartItemsData = await cartItemsResponse.json();\n            const quantityDict = {};\n            const updatedCartItems = [];\n            for (const cartItem of cartItemsData) {\n              // Check if productid has been processed\n              if (!quantityDict[cartItem.productid]) {\n                const productResponse = await fetch(`http://localhost:3000/api/v1/products/${cartItem.productid}`);\n                if (productResponse.ok) {\n                  const productData = await productResponse.json();\n\n                  // Count occurrences of the same productid in cartItemsData\n                  const productidCount = cartItemsData.filter(item => item.productid === cartItem.productid).length;\n                  updatedCartItems.push({\n                    ...cartItem,\n                    name: productData[0].name,\n                    price: productData[0].price * productidCount,\n                    quantity: productidCount\n                  });\n\n                  // Mark productid as processed\n                  quantityDict[cartItem.productid] = true;\n                } else {\n                  console.error(`Failed to fetch product details for product ID ${cartItem.productid}.`);\n                }\n              }\n            }\n            setCartItems(updatedCartItems);\n          } else {\n            console.error(\"Failed to fetch cart items.\", cartItemsResponse.statusText);\n          }\n        } else {\n          // If the cart does not exist, create a new cart\n          const createCartResponse = await fetch(\"http://localhost:3000/api/v1/cart\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${localStorage.token}`\n            },\n            body: JSON.stringify({\n              user_id: userId // Include the user ID obtained from the token\n            })\n          });\n\n          if (createCartResponse.ok) {\n            const newCartData = await createCartResponse.json();\n            const newCartId = newCartData.cart_id;\n            const newCartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${newCartId}`);\n            if (newCartItemsResponse.ok) {\n              const newCartItemsData = await newCartItemsResponse.json();\n              setCartItems(newCartItemsData);\n            } else {\n              console.error(\"Failed to fetch cart items for the new cart.\", newCartItemsResponse.statusText);\n            }\n          } else {\n            console.error(\"Failed to create or retrieve cart for the user.\");\n          }\n        }\n      } else {\n        console.error(\"Failed to fetch user cart information.\", cartResponse.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n    }\n  };\n  const calculateTotal = () => {\n    // Create an object to store the quantity of each product\n    const productQuantities = {};\n\n    // Count the occurrences of each productid in the cartItems array\n    cartItems.forEach(cartItem => {\n      const {\n        productid\n      } = cartItem;\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\n    });\n\n    // Calculate the total based on the quantity and price of each product\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\n      const quantity = productQuantities[productid];\n      const product = cartItems.find(item => item.productid === parseInt(productid));\n      if (product) {\n        return acc + quantity * product.price;\n      }\n      return acc;\n    }, 0);\n    return total;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cart-header\",\n        children: \"Shopping Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"cart-list\",\n        children: cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"item-name\",\n          children: [cartItem.quantity, \" x \", cartItem.name, \" - $\", cartItem.price]\n        }, cartItem.cartitem_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"total\",\n        children: [\"Total: $\", calculateTotal()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"yMyLm0mTOdUD4xRL2vnEhQFbjeY=\");\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Cart","_s","cartItems","setCartItems","fetchCartItems","console","log","localStorage","token","userResponse","fetch","method","headers","ok","error","userData","json","userId","id","cartResponse","Authorization","cartData","length","cartId","cart_id","cartItemsResponse","cartItemsData","quantityDict","updatedCartItems","cartItem","productid","productResponse","productData","productidCount","filter","item","push","name","price","quantity","statusText","createCartResponse","body","JSON","stringify","user_id","newCartData","newCartId","newCartItemsResponse","newCartItemsData","calculateTotal","productQuantities","forEach","total","Object","keys","reduce","acc","product","find","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","cartitem_id","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/ecommerce-backend-API-master/src/ecommerce/src/components/Cart/cart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./cart.css\";\r\n\r\nconst Cart = () => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCartItems();\r\n  }, []);\r\n\r\n  const fetchCartItems = async () => {\r\n    console.log(localStorage.token);\r\n    try {\r\n      const userResponse = await fetch(\r\n        \"http://localhost:3000/api/v1/auth/user-data\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            token: localStorage.token,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!userResponse.ok) {\r\n        console.error(\"Failed to retrieve user information.\");\r\n        return;\r\n      }\r\n\r\n      const userData = await userResponse.json();\r\n      const userId = userData.id;\r\n\r\n      const cartResponse = await fetch(\r\n        `http://localhost:3000/api/v1/cart/user/${userId}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (cartResponse.ok) {\r\n        const cartData = await cartResponse.json();\r\n\r\n        if (cartData.length > 0) {\r\n          const cartId = cartData[0].cart_id;\r\n\r\n          const cartItemsResponse = await fetch(\r\n            `http://localhost:3000/api/v1/cartitem/${cartId}`\r\n          );\r\n\r\n          if (cartItemsResponse.ok) {\r\n            const cartItemsData = await cartItemsResponse.json();\r\n\r\n            const quantityDict = {};\r\n            const updatedCartItems = [];\r\n\r\n            for (const cartItem of cartItemsData) {\r\n              // Check if productid has been processed\r\n              if (!quantityDict[cartItem.productid]) {\r\n                const productResponse = await fetch(\r\n                  `http://localhost:3000/api/v1/products/${cartItem.productid}`\r\n                );\r\n\r\n                if (productResponse.ok) {\r\n                  const productData = await productResponse.json();\r\n\r\n                  // Count occurrences of the same productid in cartItemsData\r\n                  const productidCount = cartItemsData.filter(\r\n                    (item) => item.productid === cartItem.productid\r\n                  ).length;\r\n\r\n                  updatedCartItems.push({\r\n                    ...cartItem,\r\n                    name: productData[0].name,\r\n                    price: productData[0].price * productidCount,\r\n                    quantity: productidCount,\r\n                  });\r\n\r\n                  // Mark productid as processed\r\n                  quantityDict[cartItem.productid] = true;\r\n                } else {\r\n                  console.error(\r\n                    `Failed to fetch product details for product ID ${cartItem.productid}.`\r\n                  );\r\n                }\r\n              }\r\n            }\r\n\r\n            setCartItems(updatedCartItems);\r\n          } else {\r\n            console.error(\r\n              \"Failed to fetch cart items.\",\r\n              cartItemsResponse.statusText\r\n            );\r\n          }\r\n        } else {\r\n          // If the cart does not exist, create a new cart\r\n          const createCartResponse = await fetch(\r\n            \"http://localhost:3000/api/v1/cart\",\r\n            {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.token}`,\r\n              },\r\n              body: JSON.stringify({\r\n                user_id: userId, // Include the user ID obtained from the token\r\n              }),\r\n            }\r\n          );\r\n\r\n          if (createCartResponse.ok) {\r\n            const newCartData = await createCartResponse.json();\r\n            const newCartId = newCartData.cart_id;\r\n\r\n            const newCartItemsResponse = await fetch(\r\n              `http://localhost:3000/api/v1/cartitem/${newCartId}`\r\n            );\r\n\r\n            if (newCartItemsResponse.ok) {\r\n              const newCartItemsData = await newCartItemsResponse.json();\r\n              setCartItems(newCartItemsData);\r\n            } else {\r\n              console.error(\r\n                \"Failed to fetch cart items for the new cart.\",\r\n                newCartItemsResponse.statusText\r\n              );\r\n            }\r\n          } else {\r\n            console.error(\"Failed to create or retrieve cart for the user.\");\r\n          }\r\n        }\r\n      } else {\r\n        console.error(\r\n          \"Failed to fetch user cart information.\",\r\n          cartResponse.statusText\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching cart:\", error);\r\n    }\r\n  };\r\n\r\n  const calculateTotal = () => {\r\n    // Create an object to store the quantity of each product\r\n    const productQuantities = {};\r\n\r\n    // Count the occurrences of each productid in the cartItems array\r\n    cartItems.forEach((cartItem) => {\r\n      const { productid } = cartItem;\r\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\r\n    });\r\n\r\n    // Calculate the total based on the quantity and price of each product\r\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\r\n      const quantity = productQuantities[productid];\r\n      const product = cartItems.find(\r\n        (item) => item.productid === parseInt(productid)\r\n      );\r\n\r\n      if (product) {\r\n        return acc + quantity * product.price;\r\n      }\r\n      return acc;\r\n    }, 0);\r\n\r\n    return total;\r\n  };\r\n\r\n  return (\r\n    <div className=\"cart-wrapper\">\r\n      <div className=\"cart-container\">\r\n        <h2 className=\"cart-header\">Shopping Cart</h2>\r\n        <ul className=\"cart-list\">\r\n          {cartItems.map((cartItem) => (\r\n            <li className=\"item-name\" key={cartItem.cartitem_id}>\r\n              {cartItem.quantity} x {cartItem.name} - ${cartItem.price}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"total\">Total: ${calculateTotal()}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}