{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shade\\\\OneDrive\\\\Documents\\\\DevProject\\\\ecommerce-backend-API-master\\\\src\\\\ecommerce\\\\src\\\\components\\\\Cart\\\\cart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./cart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const fetchCartItems = async setCartItems => {\n  console.log(localStorage.token);\n  try {\n    const userResponse = await fetch(\"http://localhost:3000/api/v1/auth/user-data\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token: localStorage.token\n      }\n    });\n    if (!userResponse.ok) {\n      console.error(\"Failed to retrieve user information.\");\n      return;\n    }\n    const userData = await userResponse.json();\n    const userId = userData.id;\n    const cartResponse = await fetch(`http://localhost:3000/api/v1/cart/user/${userId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    });\n    if (cartResponse.ok) {\n      const cartData = await cartResponse.json();\n      if (cartData.length > 0) {\n        const cartId = cartData[0].cart_id;\n        const cartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${cartId}`);\n        if (cartItemsResponse.ok) {\n          const cartItemsData = await cartItemsResponse.json();\n\n          // Process the cart items and update the state\n          const updatedCartItems = processCartItems(cartItemsData);\n          setCartItems(updatedCartItems);\n        } else {\n          console.error(\"Failed to fetch cart items.\", cartItemsResponse.statusText);\n        }\n      } else {\n        // If the cart does not exist, create a new cart\n        const createCartResponse = await fetch(`http://localhost:3000/api/v1/cart/${userId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.token}`\n          },\n          body: JSON.stringify({\n            user_id: userId // Include the user ID obtained from the token\n          })\n        });\n\n        if (createCartResponse.ok) {\n          const newCartData = await createCartResponse.json();\n          const newCartId = newCartData.cart_id;\n          const newCartItemsResponse = await fetch(`http://localhost:3000/api/v1/cartitem/${newCartId}`);\n          if (newCartItemsResponse.ok) {\n            const newCartItemsData = await newCartItemsResponse.json();\n\n            // Check if there are any cart items\n            if (newCartItemsData.length > 0) {\n              setCartItems(newCartItemsData);\n            } else {\n              console.log(\"No cart items found for the new cart.\");\n              // Handle the case when there are no cart items\n            }\n          } else {\n            console.error(\"Failed to fetch cart items for the new cart.\", newCartItemsResponse.statusText);\n          }\n        } else {\n          console.error(\"Failed to create or retrieve cart for the user.\");\n        }\n      }\n    } else {\n      console.error(\"Failed to fetch user cart information.\", cartResponse.statusText);\n    }\n  } catch (error) {\n    console.error(\"Error fetching cart:\", error);\n  }\n};\nconst processCartItems = async cartItemsData => {\n  const quantityDict = {};\n  const updatedCartItems = [];\n  for (const cartItem of cartItemsData) {\n    // Check if productid has been processed\n    if (!quantityDict[cartItem.productid]) {\n      const productResponse = await fetch(`http://localhost:3000/api/v1/products/${cartItem.productid}`);\n      if (productResponse.ok) {\n        const productData = await productResponse.json();\n\n        // Count occurrences of the same productid in cartItemsData\n        const productidCount = cartItemsData.filter(item => item.productid === cartItem.productid).length;\n        updatedCartItems.push({\n          ...cartItem,\n          name: productData[0].name,\n          price: productData[0].price * productidCount,\n          quantity: productidCount\n        });\n\n        // Mark productid as processed\n        quantityDict[cartItem.productid] = true;\n      } else {\n        console.error(`Failed to fetch product details for product ID ${cartItem.productid}.`);\n      }\n    }\n  }\n  return updatedCartItems;\n};\nexport const refreshCart = async ({\n  setCartItems\n}) => {\n  try {\n    // Fetch updated cart items and pass a callback to update the state\n    await fetchCartItems(setCartItems);\n  } catch (error) {\n    console.error(\"Error refreshing cart:\", error);\n  }\n};\nexport const Cart = ({\n  setCartItems\n}) => {\n  _s();\n  const [cartItems, setCartItemsLocal] = useState([]);\n  useEffect(() => {\n    fetchCartItems(setCartItemsLocal);\n  }, []);\n  useEffect(() => {\n    console.log(\"Cart items updated:\", cartItems);\n\n    // Example: Update the component state to trigger a re-render\n    setCartItems([...cartItems]); // Create a new array with the same elements\n  }, [cartItems, setCartItems]);\n  const calculateTotal = () => {\n    if (!cartItems || !Array.isArray(cartItems)) {\n      return 0;\n    }\n\n    // Create an object to store the quantity of each product\n    const productQuantities = {};\n\n    // Count the occurrences of each productid in the cartItems array\n    cartItems.forEach(cartItem => {\n      const {\n        productid\n      } = cartItem;\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\n    });\n\n    // Calculate the total based on the quantity and price of each product\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\n      const quantity = productQuantities[productid];\n      const product = cartItems.find(item => item.productid === parseInt(productid));\n      if (product) {\n        return acc + quantity * product.price;\n      }\n      return acc;\n    }, 0);\n    return total;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cart-header\",\n        children: \"Shopping Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"cart-list\",\n        children: cartItems && Array.isArray(cartItems) && cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"item-name\",\n          children: [cartItem.quantity, \" x \", cartItem.name, \" - $\", cartItem.price]\n        }, cartItem.cartitem_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"total\",\n        children: [\"Total: $\", calculateTotal()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"ycqJBO/RjQ6CpVhgEjNwxWZzuWY=\");\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","fetchCartItems","setCartItems","console","log","localStorage","token","userResponse","fetch","method","headers","ok","error","userData","json","userId","id","cartResponse","Authorization","cartData","length","cartId","cart_id","cartItemsResponse","cartItemsData","updatedCartItems","processCartItems","statusText","createCartResponse","body","JSON","stringify","user_id","newCartData","newCartId","newCartItemsResponse","newCartItemsData","quantityDict","cartItem","productid","productResponse","productData","productidCount","filter","item","push","name","price","quantity","refreshCart","Cart","_s","cartItems","setCartItemsLocal","calculateTotal","Array","isArray","productQuantities","forEach","total","Object","keys","reduce","acc","product","find","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","cartitem_id","_c","$RefreshReg$"],"sources":["C:/Users/shade/OneDrive/Documents/DevProject/ecommerce-backend-API-master/src/ecommerce/src/components/Cart/cart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./cart.css\";\r\n\r\nexport const fetchCartItems = async (setCartItems) => {\r\n  console.log(localStorage.token);\r\n  try {\r\n    const userResponse = await fetch(\r\n      \"http://localhost:3000/api/v1/auth/user-data\",\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          token: localStorage.token,\r\n        },\r\n      }\r\n    );\r\n\r\n    if (!userResponse.ok) {\r\n      console.error(\"Failed to retrieve user information.\");\r\n      return;\r\n    }\r\n\r\n    const userData = await userResponse.json();\r\n    const userId = userData.id;\r\n\r\n    const cartResponse = await fetch(\r\n      `http://localhost:3000/api/v1/cart/user/${userId}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    if (cartResponse.ok) {\r\n      const cartData = await cartResponse.json();\r\n\r\n      if (cartData.length > 0) {\r\n        const cartId = cartData[0].cart_id;\r\n\r\n        const cartItemsResponse = await fetch(\r\n          `http://localhost:3000/api/v1/cartitem/${cartId}`\r\n        );\r\n\r\n        if (cartItemsResponse.ok) {\r\n          const cartItemsData = await cartItemsResponse.json();\r\n\r\n          // Process the cart items and update the state\r\n          const updatedCartItems = processCartItems(cartItemsData);\r\n          setCartItems(updatedCartItems);\r\n        } else {\r\n          console.error(\r\n            \"Failed to fetch cart items.\",\r\n            cartItemsResponse.statusText\r\n          );\r\n        }\r\n      } else {\r\n        // If the cart does not exist, create a new cart\r\n        const createCartResponse = await fetch(\r\n          `http://localhost:3000/api/v1/cart/${userId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n            body: JSON.stringify({\r\n              user_id: userId, // Include the user ID obtained from the token\r\n            }),\r\n          }\r\n        );\r\n\r\n        if (createCartResponse.ok) {\r\n          const newCartData = await createCartResponse.json();\r\n          const newCartId = newCartData.cart_id;\r\n\r\n          const newCartItemsResponse = await fetch(\r\n            `http://localhost:3000/api/v1/cartitem/${newCartId}`\r\n          );\r\n\r\n          if (newCartItemsResponse.ok) {\r\n            const newCartItemsData = await newCartItemsResponse.json();\r\n\r\n            // Check if there are any cart items\r\n            if (newCartItemsData.length > 0) {\r\n              setCartItems(newCartItemsData);\r\n            } else {\r\n              console.log(\"No cart items found for the new cart.\");\r\n              // Handle the case when there are no cart items\r\n            }\r\n          } else {\r\n            console.error(\r\n              \"Failed to fetch cart items for the new cart.\",\r\n              newCartItemsResponse.statusText\r\n            );\r\n          }\r\n        } else {\r\n          console.error(\"Failed to create or retrieve cart for the user.\");\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"Failed to fetch user cart information.\",\r\n        cartResponse.statusText\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching cart:\", error);\r\n  }\r\n};\r\n\r\nconst processCartItems = async (cartItemsData) => {\r\n  const quantityDict = {};\r\n  const updatedCartItems = [];\r\n\r\n  for (const cartItem of cartItemsData) {\r\n    // Check if productid has been processed\r\n    if (!quantityDict[cartItem.productid]) {\r\n      const productResponse = await fetch(\r\n        `http://localhost:3000/api/v1/products/${cartItem.productid}`\r\n      );\r\n\r\n      if (productResponse.ok) {\r\n        const productData = await productResponse.json();\r\n\r\n        // Count occurrences of the same productid in cartItemsData\r\n        const productidCount = cartItemsData.filter(\r\n          (item) => item.productid === cartItem.productid\r\n        ).length;\r\n\r\n        updatedCartItems.push({\r\n          ...cartItem,\r\n          name: productData[0].name,\r\n          price: productData[0].price * productidCount,\r\n          quantity: productidCount,\r\n        });\r\n\r\n        // Mark productid as processed\r\n        quantityDict[cartItem.productid] = true;\r\n      } else {\r\n        console.error(\r\n          `Failed to fetch product details for product ID ${cartItem.productid}.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return updatedCartItems;\r\n};\r\n\r\nexport const refreshCart = async ({ setCartItems }) => {\r\n  try {\r\n    // Fetch updated cart items and pass a callback to update the state\r\n    await fetchCartItems(setCartItems);\r\n  } catch (error) {\r\n    console.error(\"Error refreshing cart:\", error);\r\n  }\r\n};\r\n\r\nexport const Cart = ({ setCartItems }) => {\r\n  const [cartItems, setCartItemsLocal] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCartItems(setCartItemsLocal);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Cart items updated:\", cartItems);\r\n\r\n    // Example: Update the component state to trigger a re-render\r\n    setCartItems([...cartItems]); // Create a new array with the same elements\r\n  }, [cartItems, setCartItems]);\r\n\r\n  const calculateTotal = () => {\r\n    if (!cartItems || !Array.isArray(cartItems)) {\r\n      return 0;\r\n    }\r\n\r\n    // Create an object to store the quantity of each product\r\n    const productQuantities = {};\r\n\r\n    // Count the occurrences of each productid in the cartItems array\r\n    cartItems.forEach((cartItem) => {\r\n      const { productid } = cartItem;\r\n      productQuantities[productid] = (productQuantities[productid] || 0) + 1;\r\n    });\r\n\r\n    // Calculate the total based on the quantity and price of each product\r\n    const total = Object.keys(productQuantities).reduce((acc, productid) => {\r\n      const quantity = productQuantities[productid];\r\n      const product = cartItems.find(\r\n        (item) => item.productid === parseInt(productid)\r\n      );\r\n\r\n      if (product) {\r\n        return acc + quantity * product.price;\r\n      }\r\n      return acc;\r\n    }, 0);\r\n\r\n    return total;\r\n  };\r\n\r\n  return (\r\n    <div className=\"cart-wrapper\">\r\n      <div className=\"cart-container\">\r\n        <h2 className=\"cart-header\">Shopping Cart</h2>\r\n        <ul className=\"cart-list\">\r\n          {cartItems &&\r\n            Array.isArray(cartItems) &&\r\n            cartItems.map((cartItem) => (\r\n              <li className=\"item-name\" key={cartItem.cartitem_id}>\r\n                {cartItem.quantity} x {cartItem.name} - ${cartItem.price}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n        <p className=\"total\">Total: ${calculateTotal()}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}